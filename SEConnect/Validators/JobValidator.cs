//  -------------------------------------------------------------------------------------------------------------------- 
// <copyright file="JobValidator.cs" company="Microsoft">
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
//  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
// </copyright>
// <auto-generated />
// -------------------------------------------------------------------------------------------------------------------- 

namespace HP.ICE.BusinessLogic.Validators
{
    using System;
    #region Namespaces

    using System.Collections.Generic;
    using System.Linq;
    using DomainModels.Custom;
    using DomainModels.ETL;
    using Framework;
    using Framework.Helpers;
    using HP.ICE.DataAccess.Interfaces;
    using HP.ICE.Framework.Extensions;
    using Interfaces;

    #endregion

    /// <summary>
    /// The job validator.
    /// </summary>
    /// <seealso cref="HP.ICE.BusinessLogic.Interfaces.IJobValidator" />
    /// <seealso cref="HP.ICE.BusinessLogic.Validators.IEntityBusinessRuleValidator" />
    public class JobValidator : IJobValidator
    {
        /// <summary>
        /// The job schedule information query repository
        /// </summary>
        private readonly IJobScheduleInfoQueryRepository jobScheduleInfoQueryRepository;

        /// <summary>
        /// The job information repository
        /// </summary>
        private readonly IJobInfoRepository jobInfoRepository;

        /// <summary>
        /// The sales org repository
        /// </summary>
        private readonly ISalesOrganizationRepository salesOrgRepository;

        /// <summary>
        /// The user resolver service
        /// </summary>
        private readonly IUserResolverService userResolverService;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobValidator" /> class.
        /// </summary>
        /// <param name="jobScheduleInfoQueryRepository">The job schedule information query repository.</param>
        /// <param name="jobInfoRepository">The job information repository.</param>
        /// <param name="salesOrgRepository">The sales org repository.</param>
        /// <param name="userResolverService">The user resolver service.</param>
        public JobValidator(
            IJobScheduleInfoQueryRepository jobScheduleInfoQueryRepository,
            IJobInfoRepository jobInfoRepository,
            ISalesOrganizationRepository salesOrgRepository,
            IUserResolverService userResolverService)
        {
            Validator.ArgumentNotNull(jobScheduleInfoQueryRepository, nameof(jobScheduleInfoQueryRepository));
            Validator.ArgumentNotNull(jobInfoRepository, nameof(jobInfoRepository));
            Validator.ArgumentNotNull(salesOrgRepository, nameof(salesOrgRepository));
            Validator.ArgumentNotNull(userResolverService, nameof(userResolverService));

            this.jobScheduleInfoQueryRepository = jobScheduleInfoQueryRepository;
            this.jobInfoRepository = jobInfoRepository;
            this.salesOrgRepository = salesOrgRepository;
            this.userResolverService = userResolverService;
        }

        /// <summary>
        /// Validates the job.
        /// </summary>
        /// <param name="jobInfo">The job information.</param>
        /// <returns>
        /// Returns error messages
        /// </returns>
        public string Validatejob(JobInfo jobInfo)
        {
            Validator.ArgumentNotNull(jobInfo, nameof(jobInfo));

            string errorMessage = string.Empty;

            if (string.IsNullOrWhiteSpace(jobInfo.JobName))
            {
                errorMessage = Constants.JobNameEmptyErrorMessage;
            }
            else if (this.IsJobNameAlreadyUsed(jobInfo))
            {
                errorMessage = Constants.JobNameAlreadyUsedMessage;
            }
            else if(!this.HasAccessToSalesorganizationId(jobInfo))
            {
                errorMessage = Constants.SalesOrgNotAccessibleMessage;
            }

            return errorMessage;
        }

        /// <summary>
        /// Determines whether [is job name already used] [the specified job information].
        /// </summary>
        /// <param name="jobInfo">The job information.</param>
        /// <returns>
        ///   <c>true</c> if [is job name already used] [the specified job information]; otherwise, <c>false</c>.
        /// </returns>
        private bool IsJobNameAlreadyUsed(JobInfo jobInfo)
        {
            return this.jobInfoRepository.Get(x => x.JobId != jobInfo.JobId && CommonHelpers.IsEqualsWithIgnoreCase(x.JobName, jobInfo.JobName)).Any();
        }

        /// <summary>
        /// Determines whether [has access to salesorganization identifier] [the specified job information].
        /// </summary>
        /// <param name="jobInfo">The job information.</param>
        /// <returns>
        ///   <c>true</c> if [has access to salesorganization identifier] [the specified job information]; otherwise, <c>false</c>.
        /// </returns>
        private bool HasAccessToSalesorganizationId(JobInfo jobInfo)
        {
            var hasAccessToSelectedSalesOrgs = true;
            string salesorgIds = jobInfo.ScheduleItemGroup.ScheduleItem.Where(x => string.Equals(x.FieldName, ScheduleItemConstants.SalesOrganizationId, System.StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault()?.FieldValue;

            if (string.IsNullOrEmpty(salesorgIds))
            {
                return true;
            }

            var salesorgIdList = salesorgIds.Split(',').ToList();

            var allAccessibleSalesOrgIds = this.salesOrgRepository.GetAllSalesOrganizationsForUser(jobInfo.PlanningPeriodId, this.userResolverService.GetSimulatedUserEmail()).Select(x => x.Id).ToList();
            foreach (string id in salesorgIdList)
            {
                if (!allAccessibleSalesOrgIds.Contains(Convert.ToInt64(id)))
                {
                    return false;
                }
            }

            return hasAccessToSelectedSalesOrgs;
        }
    }
}